require('dotenv').config();
const {
  Bot,
  GrammyError,
  HttpError,
  Keyboard,
  InlineKeyboard,
} = require('grammy');
const { hydrate } = require('@grammyjs/hydrate');

const bot = new Bot(process.env.BOT_API_KEY);
bot.use(hydrate());

//  myCommands

bot.api.setMyCommands([
  { command: 'start', description: '–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã' },
  { command: 'id', description: '–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–π Telegram ID' },
  { command: 'mood', description: '–£–∑–Ω–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ' },
  { command: 'share', description: '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º–∏' },
  { command: 'menu', description: '–í—ã–∑—ã–≤–∞—Ç—å –º–µ–Ω—é' }
]);

// Commands

bot.command('start', async (ctx) => {
  await ctx.react('üëç');
  await ctx.reply(
    '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º sly2m. https://t.me/sly_grammy_bot',
    {
      parse_mode: 'HTML',
      disable_web_page_preview: false,
    }
  );
});

bot.command(['ID', 'id', 'Id', 'iD'], async (ctx) => {
  await ctx.reply(
    `Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${ctx.msg.from.username} - ${ctx.msg.from.id}`
  );
});

bot.command('mood', async (ctx) => {
  const keyboard = new Keyboard()
    .text('–•–æ—Ä–æ—à–æ')
    .row()
    .text('–°—Ä–µ–¥–Ω–µ')
    .row()
    .text('–ü–ª–æ—Ö–æ')
    .resized()
    .oneTime();
  await ctx.reply('–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ?', {
    reply_markup: keyboard,
  });
});

bot.command('share', async (ctx) => {
  const keyboard = new Keyboard()
    .requestLocation('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è')
    .requestContact('–ö–æ–Ω—Ç–∞–∫—Ç')
    .requestPoll('–û–ø—Ä–æ—Å')
    .placeholder('–í—ã–±–µ—Ä–∏ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö...')
    .resized()
    .oneTime();

  await ctx.reply('–ß–µ–º —Ö–æ—á–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è?', {
    reply_markup: keyboard,
  });
});

bot.command('keyboard', async (ctx) => {
  const keyboard = new InlineKeyboard()
    .text('1', 'button-1')
    .row()
    .text('2', 'button-2')
    .row()
    .text('3', 'button-3');

  await ctx.reply('–í—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É', {
    reply_markup: keyboard,
  });
});

bot.callbackQuery(/button-[1-3]/, async (ctx) => {
  await ctx.answerCallbackQuery();
  await ctx.reply(`–¢—ã –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É: ${ctx.callbackQuery.data}`);
});

bot.command('jump', async (ctx) => {
  const keyboard = new InlineKeyboard().url(
    '–ü–µ—Ä–µ–π—Ç–∏ google.com',
    'https://google.com'
  );
  await ctx.reply('–£–π—Ç–∏ –∏–∑ —Ç–µ–ª–µ–≥—Ä–∞–º–∞?', {
    reply_markup: keyboard,
  });
});

const menuKeyboard = new InlineKeyboard()
  .text('–£–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞', 'status')
  .row()
  .text('–ü–æ–º–æ—â—å', 'support');

const backKeyboard = new InlineKeyboard().text('< –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é', 'back');

bot.command('menu', async (ctx) => {
  await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é', {
    reply_markup: menuKeyboard,
  });
});

bot.callbackQuery('status', async (ctx) => {
    await ctx.callbackQuery.message.editText('–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: –≤ –ø—É—Ç–∏', {
    reply_markup: backKeyboard,
    });
await ctx.answerCallbackQuery();
});

bot.callbackQuery('support', async (ctx) => {
    await ctx.callbackQuery.message.editText('–ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à –∑–∞–ø—Ä–æ—Å', {
        reply_markup: backKeyboard,
    });
    await ctx.answerCallbackQuery();
});  

bot.callbackQuery('back', async (ctx) => {
    await ctx.callbackQuery.message.editText('–í—ã–±–µ—Ä–µ—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é', {
        reply_markup: menuKeyboard,
    });
    await ctx.answerCallbackQuery();
});  

// Messages

bot.hears('–•–æ—Ä–æ—à–æ', async (ctx) => {
  await ctx.reply('–£—Ä–∞!');
});

bot.hears(['–°—Ä–µ–¥–Ω–µ', '–ü–ª–æ—Ö–æ'], async (ctx) => {
  await ctx.reply('–ù–µ —É—Ä–∞.');
});

bot.hears([/–ø–∏–ø–µ—Ü/, /–ø–æ—Ü/], async (ctx) => {
  await ctx.reply('–†—É–≥–∞—Ç–µ–ª—å—Å—Ç–≤–∞ –∑–∞–ø—Ä–µ—â–µ–Ω—ã!');
});

bot.on(':contact', async (ctx) => {
  await ctx.reply('–°–ø–∞—Å–∏–±–æ –∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç!');
});

bot.on('msg', async (ctx) => {
  console.log(ctx.msg);
});

bot.catch((err) => {
  const ctx = err.ctx;
  console.error(`Error while hadling update ${ctx.update.update_id}:`);
  const e = err.error;

  if (e instanceof GrammyError) {
    console.error('Error in request: ', e.description);
  } else if (e instanceof HttpError) {
    console.error('Could not connect to Telegram', e);
  } else {
    console.error('Unknown error: ', e);
  }
});

bot.start();
