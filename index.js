require('dotenv').config();
const {
  Bot,
  GrammyError,
  HttpError,
  Keyboard,
  InlineKeyboard,
} = require('grammy');

const bot = new Bot(process.env.BOT_API_KEY);
const getStockInfo = require('./stock.js');

const stockAPIKey = process.env.STOCK_API_KEY;

//  myCommands

bot.api.setMyCommands([
  { command: 'start', description: '–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã' },
  { command: 'id', description: '–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–π Telegram ID' },
  { command: 'share', description: '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º–∏' },
]);

// Commands

bot.command('start', async (ctx) => {
  await ctx.react('üëç');
  await ctx.reply(
    '<b>–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º sly2m.</b> https://t.me/sly_bot',
    {
      parse_mode: 'HTML',
    }
  );
});

bot.command(['ID', 'id', 'Id', 'iD'], async (ctx) => {
  await ctx.reply(`–¢–≤–æ–π Telegram ID: ${ctx.msg.from.id}`);
});

bot.command(['stock'], async (ctx) => {
  const symbol = ctx.msg.text.split(' ')[1].toUpperCase();
  if (!symbol) {
    await ctx.reply('–ù–µ —É–∫–∞–∑–∞–Ω —Å–∏–º–≤–æ–ª –∞–∫—Ü–∏–∏.');
    return;
  }

  const stockInfo = await getStockInfo(symbol, stockAPIKey);
  if (!stockInfo) {
    await ctx.reply(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ü–∏—è—Ö ${symbol}.`);
    return;
  } else {
    try {
      const data = await stockInfo.json();
      await ctx.reply(data);
    } catch (error) {
      console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫—Ü–∏—è—Ö ${symbol} `, error);
      await ctx.reply(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫—Ü–∏—è—Ö ${symbol} `);
    }
  }
});

bot.command('share', async (ctx) => {
  let keyboard = null;
  if (ctx.chat.type === 'group' || ctx.chat.type === 'supergroup') {
    await ctx.reply('–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ.');
    return;
  } else {
    keyboard = new Keyboard()
      .requestLocation('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è')
      .requestContact('–ö–æ–Ω—Ç–∞–∫—Ç')
      .requestPoll('–û–ø—Ä–æ—Å')
      .placeholder('–í—ã–±–µ—Ä–∏ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö...')
      .resized()
      .oneTime();
  }

  await ctx.reply('–ß–µ–º —Ö–æ—á–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è?', {
    reply_markup: keyboard,
  });
});

bot.command('jump', async (ctx) => {
  const keyboard = new InlineKeyboard().url(
    '–ü–µ—Ä–µ–π—Ç–∏ google.com',
    'http://google.com'
  );
  await ctx.reply('–£–π—Ç–∏ –∏–∑ —Ç–µ–ª–µ–≥—Ä–∞–º–∞?', {
    reply_markup: keyboard,
  });
});

// Messages

bot.on(':contact', async (ctx) => {
  await ctx.reply('–°–ø–∞—Å–∏–±–æ –∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç!');
});

bot.on(':location', async (ctx) => {
  await ctx.reply('–°–ø–∞—Å–∏–±–æ –∑–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é!');
});

// Errors

bot.catch((err) => {
  const ctx = err.ctx;
  console.error(`Error while hadling update ${ctx.update.update_id}:`);
  const e = err.error;

  if (e instanceof GrammyError) {
    console.error('Error in request: ', e.description);
  } else if (e instanceof HttpError) {
    console.error('Could not connect to Telegram', e);
  } else {
    console.error('Unknown error: ', e);
  }
});

// Start bot

bot.start();
