require('dotenv').config();
const {
    Bot,
    GrammyError,
    HttpError,
    Keyboard,
    InlineKeyboard,
} = require('grammy');

const bot = new Bot(process.env.BOT_API_KEY);
const { getStockInfo, getStockNews } = require('./stock');
const { getMemes } = require('./webparser.js');

const stockAPIKey = process.env.STOCK_API_KEY;
const memePageUrl = process.env.MEME_PAGE_URL;

//  myCommands //

bot.api.setMyCommands([
    { command: 'start', description: '–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã' },
    { command: 'id', description: '–ü–æ–∫–∞–∑–∞—Ç—å —Å–≤–æ–π Telegram ID' },
    { command: 'share', description: '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º–∏' },
    {
        command: 'stock',
        description: '–¶–µ–Ω–∞ –∞–∫—Ü–∏–π –∫–æ–º–ø–∞–Ω–∏–∏ "—á–µ—Ç—ã—Ä–µ—Ö–±—É–∫–≤–µ–Ω–Ω—ã–π –∫–æ–¥ NASDAQ"',
    },
    {
        command: 'news',
        description: '–ù–æ–≤–æ—Å—Ç–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏ "—á–µ—Ç—ã—Ä–µ—Ö–±—É–∫–≤–µ–Ω–Ω—ã–π –∫–æ–¥ NASDAQ"',
    },
    { command: 'randommeme', description: '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –º–µ–º' },
]);

// Commands //

bot.command('start', async (ctx) => {
    await ctx.react('üëç');
    await ctx.reply(
        '<b>–ü–æ–µ—Ö–∞–ª–∏!</b>\n\n' +
            '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ü–µ–Ω–µ –∞–∫—Ü–∏–π –∫–æ–º–ø–∞–Ω–∏–∏ –≤–≤–µ–¥–∏—Ç–µ /stock –∏ –∫–æ–¥ –∫–æ–º–ø–∞–Ω–∏–∏.\n' +
            '–ù–∞–ø—Ä–∏–º–µ—Ä —Ç–∞–∫ /stock TSLA.\n' +
            '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –æ –∫–æ–º–ø–∞–Ω–∏–∏ –≤–≤–µ–¥–∏—Ç–µ /news –∏ –∫–æ–¥ –∫–æ–º–ø–∞–Ω–∏–∏.\n' +
            '–ù–∞–ø—Ä–∏–º–µ—Ä —Ç–∞–∫ /news NVDA.\n' +
            '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –º–µ–º–∞ –≤–≤–µ–¥–∏—Ç–µ /randommeme.\n' +
            '–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–æ–µ–≥–æ Telegram ID –≤–≤–µ–¥–∏—Ç–µ /id.\n' +
            '–î–ª—è –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –¥–∞–Ω–Ω—ã–º–∏ –≤–≤–µ–¥–∏—Ç–µ /share.',
        {
            parse_mode: 'HTML',
        }
    );
});

bot.command(['ID', 'id', 'Id', 'iD'], async (ctx) => {
    await ctx.reply(`–¢–≤–æ–π Telegram ID: ${ctx.msg.from.id}`);
});

bot.command(['stock'], async (ctx) => {
    const symbol = ctx.match.toUpperCase();
    if (!symbol) {
        await ctx.reply('–ü–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã —Ç—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å –∫–æ–¥ –∫–æ–º–ø–∞–Ω–∏–∏.');
        return;
    }

    const stockInfo = await getStockInfo(symbol, stockAPIKey);
    if (!stockInfo) {
        await ctx.reply(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ü–∏—è—Ö ${symbol}.`);
        return;
    } else {
        try {
            const data = await stockInfo.json();
            if (data.last[0]) {
                console.log(data);
                await ctx.reply(
                    `–¶–µ–Ω–∞ –∑–∞ –∞–∫—Ü–∏—é <b>${symbol}</b> —Å–µ–≥–æ–¥–Ω—è ${data.last[0]} USD`,
                    {
                        parse_mode: 'HTML',
                    }
                );
                return;
            }
        } catch (error) {
            console.error(
                `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫—Ü–∏—è—Ö ${symbol} `,
                error
            );
            await ctx.reply(
                `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–∫—Ü–∏—è—Ö ${symbol} `
            );
        }
    }
});

bot.command(['news'], async (ctx) => {
    const symbol = ctx.match.toUpperCase();
    if (!symbol) {
        await ctx.reply('–ü–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã —Ç—Ä–µ–±—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å –∫–æ–¥ –∫–æ–º–ø–∞–Ω–∏–∏.');
        return;
    }

    const stockNews = await getStockNews(symbol, stockAPIKey);
    if (!stockNews) {
        await ctx.reply(`–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏ ${symbol}.`);
        return;
    } else {
        try {
            const data = await stockNews.json();
            if (data.headline[0]) {
                console.log(data);
                await ctx.reply(
                    `–ü–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ <b>${symbol}</b> –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.`,
                    {
                        parse_mode: 'HTML',
                    }
                );
                await ctx.reply(
                    `<a href="${data.source[0]}">${data.source[0]}</a>`,
                    {
                        parse_mode: 'HTML',
                    }
                );
                return;
            }
        } catch (error) {
            console.error(
                `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏ ${symbol} `,
                error
            );
            await ctx.reply(
                `–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–ø–∞–Ω–∏–∏ ${symbol} `
            );
        }
    }
});

bot.command('share', async (ctx) => {
    let keyboard = null;
    if (ctx.chat.type === 'group' || ctx.chat.type === 'supergroup') {
        await ctx.reply('–î–∞–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º —á–∞—Ç–µ.');
        return;
    } else {
        keyboard = new Keyboard()
            .requestLocation('–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è')
            .requestContact('–ö–æ–Ω—Ç–∞–∫—Ç')
            .requestPoll('–û–ø—Ä–æ—Å')
            .placeholder('–í—ã–±–µ—Ä–∏ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö...')
            .resized()
            .oneTime();
    }

    await ctx.reply('–ß–µ–º —Ö–æ—á–µ—à—å –ø–æ–¥–µ–ª–∏—Ç—å—Å—è?', {
        reply_markup: keyboard,
    });
});

bot.command('jump', async (ctx) => {
    const keyboard = new InlineKeyboard().url(
        '–ü–µ—Ä–µ–π—Ç–∏ google.com',
        'http://google.com'
    );
    await ctx.reply('–£–π—Ç–∏ –∏–∑ —Ç–µ–ª–µ–≥—Ä–∞–º–∞?', {
        reply_markup: keyboard,
    });
});

bot.command(['randommeme'], async (ctx) => {
    const meme = await getMemes(memePageUrl);
    if (!meme) {
        await ctx.reply(`–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –º–µ–º–∞.`);
        return;
    } else {
        try {
            console.log(meme);
            await ctx.reply(meme);
            return;
        } catch (error) {
            console.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º–µ–º–∞`, error);
            await ctx.reply(
                `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –º–µ–º–∞. –ü–æ–ø–æ—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É.`
            );
        }
    }
});

// Messages //

bot.on(':contact', async (ctx) => {
    await ctx.reply('–°–ø–∞—Å–∏–±–æ –∑–∞ –∫–æ–Ω—Ç–∞–∫—Ç!');
});

bot.on(':location', async (ctx) => {
    await ctx.reply('–°–ø–∞—Å–∏–±–æ –∑–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é!');
});

// Errors //

bot.catch((err) => {
    const ctx = err.ctx;
    console.error(`Error while hadling update ${ctx.update.update_id}:`);
    const e = err.error;

    if (e instanceof GrammyError) {
        console.error('Error in request: ', e.description);
    } else if (e instanceof HttpError) {
        console.error('Could not connect to Telegram', e);
    } else {
        console.error('Unknown error: ', e);
    }
});

// Start bot //

bot.start();
